import unittest
import numpy
import numpystl.numpy_stl as sut
import time


class TestNumpyStl(unittest.TestCase):
    def test_create_bar(self):
        """Test creation of a single bar."""
        test_output = sut._create_bar(0, 0.0, 1.0, 2.0, 3.0)
        expected_output = numpy.array(
            [
                [[0.0, 2.0, 3.0], [1.0, 0.0, 3.0], [0.0, 0.0, 3.0]],
                [[1.0, 0.0, 3.0], [0.0, 2.0, 3.0], [1.0, 2.0, 3.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 3.0], [1.0, 2.0, 0.0]],
                [[1.0, 2.0, 3.0], [1.0, 0.0, 3.0], [1.0, 2.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 3.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 3.0], [1.0, 0.0, 3.0]],
                [[0.0, 2.0, 0.0], [1.0, 2.0, 0.0], [0.0, 2.0, 3.0]],
                [[1.0, 2.0, 0.0], [0.0, 2.0, 3.0], [1.0, 2.0, 3.0]],
                [[0.0, 2.0, 0.0], [0.0, 2.0, 3.0], [0.0, 0.0, 3.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 3.0], [0.0, 2.0, 0.0]],
                [[0.0, 0.0, 0.0], [0.0, 2.0, 0.0], [1.0, 2.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 2.0, 0.0]],
            ]
        )
        numpy.testing.assert_array_equal(test_output, expected_output)

    def test_create_bars_no_base(self):
        xs = numpy.array([1, 2, 3, 4])
        ys = numpy.array([5, 6, 7, 8])
        heights = numpy.array([9, 10, 11, 12])
        base_height = 0
        bars = sut._create_bars(xs, ys, heights, base_height=base_height)
        self.assertEqual((48, 3, 3), bars.shape)

    def test_create_bars_with_base(self):
        xs = numpy.array([1, 2, 3, 4])
        ys = numpy.array([5, 6, 7, 8])
        heights = numpy.array([9, 10, 11, 12])
        base_height = 1
        bars = sut._create_bars(xs, ys, heights, base_height=base_height)
        self.assertEqual((60, 3, 3), bars.shape)

    def test_create_base(self):
        xs = numpy.array([1, 2, 3, 4])
        ys = numpy.array([5, 6, 7, 8])
        base_height = 5
        base_padding = 10
        base = sut._create_base(xs, ys, base_height, base_padding)
        numpy.testing.assert_array_equal(
            [10.0, 14.0, 0.0], base.max(axis=1).max(axis=0)
        )

    def test_create_vertices_from_2d_array(self):
        input_array = numpy.array([[1, 2, 3], [4, 5, 6]])
        test_output = sut.create_stl_mesh_from_2d_array(input_array)["vectors"]
        self.assertEqual((72, 3, 3), test_output.shape)
        expected_output = numpy.array(
            [
                [[0.0, 1.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0]],
                [[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0]],
                [[1.0, 1.0, 1.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 1.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [0.0, 1.0, 1.0]],
                [[1.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [0.0, 0.0, 1.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 1.0, 0.0]],
                [[1.0, 1.0, 2.0], [2.0, 0.0, 2.0], [1.0, 0.0, 2.0]],
                [[2.0, 0.0, 2.0], [1.0, 1.0, 2.0], [2.0, 1.0, 2.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 2.0], [2.0, 1.0, 0.0]],
                [[2.0, 1.0, 2.0], [2.0, 0.0, 2.0], [2.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [2.0, 0.0, 0.0], [2.0, 0.0, 2.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 2.0], [2.0, 0.0, 2.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [1.0, 1.0, 2.0]],
                [[2.0, 1.0, 0.0], [1.0, 1.0, 2.0], [2.0, 1.0, 2.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 2.0], [1.0, 0.0, 2.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 2.0], [1.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [1.0, 1.0, 0.0], [2.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [2.0, 0.0, 0.0], [2.0, 1.0, 0.0]],
                [[2.0, 1.0, 3.0], [3.0, 0.0, 3.0], [2.0, 0.0, 3.0]],
                [[3.0, 0.0, 3.0], [2.0, 1.0, 3.0], [3.0, 1.0, 3.0]],
                [[3.0, 0.0, 0.0], [3.0, 0.0, 3.0], [3.0, 1.0, 0.0]],
                [[3.0, 1.0, 3.0], [3.0, 0.0, 3.0], [3.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [3.0, 0.0, 0.0], [3.0, 0.0, 3.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 3.0], [3.0, 0.0, 3.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [2.0, 1.0, 3.0]],
                [[3.0, 1.0, 0.0], [2.0, 1.0, 3.0], [3.0, 1.0, 3.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 3.0], [2.0, 0.0, 3.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 3.0], [2.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [2.0, 1.0, 0.0], [3.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [3.0, 0.0, 0.0], [3.0, 1.0, 0.0]],
                [[0.0, 2.0, 4.0], [1.0, 1.0, 4.0], [0.0, 1.0, 4.0]],
                [[1.0, 1.0, 4.0], [0.0, 2.0, 4.0], [1.0, 2.0, 4.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 4.0], [1.0, 2.0, 0.0]],
                [[1.0, 2.0, 4.0], [1.0, 1.0, 4.0], [1.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [1.0, 1.0, 4.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 4.0], [1.0, 1.0, 4.0]],
                [[0.0, 2.0, 0.0], [1.0, 2.0, 0.0], [0.0, 2.0, 4.0]],
                [[1.0, 2.0, 0.0], [0.0, 2.0, 4.0], [1.0, 2.0, 4.0]],
                [[0.0, 2.0, 0.0], [0.0, 2.0, 4.0], [0.0, 1.0, 4.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 4.0], [0.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [0.0, 2.0, 0.0], [1.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [1.0, 2.0, 0.0]],
                [[1.0, 2.0, 5.0], [2.0, 1.0, 5.0], [1.0, 1.0, 5.0]],
                [[2.0, 1.0, 5.0], [1.0, 2.0, 5.0], [2.0, 2.0, 5.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 5.0], [2.0, 2.0, 0.0]],
                [[2.0, 2.0, 5.0], [2.0, 1.0, 5.0], [2.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [2.0, 1.0, 5.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 5.0], [2.0, 1.0, 5.0]],
                [[1.0, 2.0, 0.0], [2.0, 2.0, 0.0], [1.0, 2.0, 5.0]],
                [[2.0, 2.0, 0.0], [1.0, 2.0, 5.0], [2.0, 2.0, 5.0]],
                [[1.0, 2.0, 0.0], [1.0, 2.0, 5.0], [1.0, 1.0, 5.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 5.0], [1.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [1.0, 2.0, 0.0], [2.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [2.0, 2.0, 0.0]],
                [[2.0, 2.0, 6.0], [3.0, 1.0, 6.0], [2.0, 1.0, 6.0]],
                [[3.0, 1.0, 6.0], [2.0, 2.0, 6.0], [3.0, 2.0, 6.0]],
                [[3.0, 1.0, 0.0], [3.0, 1.0, 6.0], [3.0, 2.0, 0.0]],
                [[3.0, 2.0, 6.0], [3.0, 1.0, 6.0], [3.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [3.0, 1.0, 6.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 6.0], [3.0, 1.0, 6.0]],
                [[2.0, 2.0, 0.0], [3.0, 2.0, 0.0], [2.0, 2.0, 6.0]],
                [[3.0, 2.0, 0.0], [2.0, 2.0, 6.0], [3.0, 2.0, 6.0]],
                [[2.0, 2.0, 0.0], [2.0, 2.0, 6.0], [2.0, 1.0, 6.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 6.0], [2.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [2.0, 2.0, 0.0], [3.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [3.0, 2.0, 0.0]],
            ]
        )
        numpy.testing.assert_array_equal(expected_output, test_output)

    def test_create_vertices_from_2d_array_with_base(self):
        input_array = numpy.array([[1, 2, 3], [4, 5, 6]])
        test_output = sut.create_stl_mesh_from_2d_array(input_array, base_height=5)[
            "vectors"
        ]
        self.assertEqual((84, 3, 3), test_output.shape)
        expected_output = numpy.array(
            [
                [[0.0, 1.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0]],
                [[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0]],
                [[1.0, 1.0, 1.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 1.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [0.0, 1.0, 1.0]],
                [[1.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 1.0, 1.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [0.0, 0.0, 1.0]],
                [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]],
                [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 1.0, 0.0]],
                [[1.0, 1.0, 2.0], [2.0, 0.0, 2.0], [1.0, 0.0, 2.0]],
                [[2.0, 0.0, 2.0], [1.0, 1.0, 2.0], [2.0, 1.0, 2.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 2.0], [2.0, 1.0, 0.0]],
                [[2.0, 1.0, 2.0], [2.0, 0.0, 2.0], [2.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [2.0, 0.0, 0.0], [2.0, 0.0, 2.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 2.0], [2.0, 0.0, 2.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [1.0, 1.0, 2.0]],
                [[2.0, 1.0, 0.0], [1.0, 1.0, 2.0], [2.0, 1.0, 2.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 2.0], [1.0, 0.0, 2.0]],
                [[1.0, 0.0, 0.0], [1.0, 0.0, 2.0], [1.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [1.0, 1.0, 0.0], [2.0, 1.0, 0.0]],
                [[1.0, 0.0, 0.0], [2.0, 0.0, 0.0], [2.0, 1.0, 0.0]],
                [[2.0, 1.0, 3.0], [3.0, 0.0, 3.0], [2.0, 0.0, 3.0]],
                [[3.0, 0.0, 3.0], [2.0, 1.0, 3.0], [3.0, 1.0, 3.0]],
                [[3.0, 0.0, 0.0], [3.0, 0.0, 3.0], [3.0, 1.0, 0.0]],
                [[3.0, 1.0, 3.0], [3.0, 0.0, 3.0], [3.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [3.0, 0.0, 0.0], [3.0, 0.0, 3.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 3.0], [3.0, 0.0, 3.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [2.0, 1.0, 3.0]],
                [[3.0, 1.0, 0.0], [2.0, 1.0, 3.0], [3.0, 1.0, 3.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 3.0], [2.0, 0.0, 3.0]],
                [[2.0, 0.0, 0.0], [2.0, 0.0, 3.0], [2.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [2.0, 1.0, 0.0], [3.0, 1.0, 0.0]],
                [[2.0, 0.0, 0.0], [3.0, 0.0, 0.0], [3.0, 1.0, 0.0]],
                [[0.0, 2.0, 4.0], [1.0, 1.0, 4.0], [0.0, 1.0, 4.0]],
                [[1.0, 1.0, 4.0], [0.0, 2.0, 4.0], [1.0, 2.0, 4.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 4.0], [1.0, 2.0, 0.0]],
                [[1.0, 2.0, 4.0], [1.0, 1.0, 4.0], [1.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [1.0, 1.0, 4.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 4.0], [1.0, 1.0, 4.0]],
                [[0.0, 2.0, 0.0], [1.0, 2.0, 0.0], [0.0, 2.0, 4.0]],
                [[1.0, 2.0, 0.0], [0.0, 2.0, 4.0], [1.0, 2.0, 4.0]],
                [[0.0, 2.0, 0.0], [0.0, 2.0, 4.0], [0.0, 1.0, 4.0]],
                [[0.0, 1.0, 0.0], [0.0, 1.0, 4.0], [0.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [0.0, 2.0, 0.0], [1.0, 2.0, 0.0]],
                [[0.0, 1.0, 0.0], [1.0, 1.0, 0.0], [1.0, 2.0, 0.0]],
                [[1.0, 2.0, 5.0], [2.0, 1.0, 5.0], [1.0, 1.0, 5.0]],
                [[2.0, 1.0, 5.0], [1.0, 2.0, 5.0], [2.0, 2.0, 5.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 5.0], [2.0, 2.0, 0.0]],
                [[2.0, 2.0, 5.0], [2.0, 1.0, 5.0], [2.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [2.0, 1.0, 5.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 5.0], [2.0, 1.0, 5.0]],
                [[1.0, 2.0, 0.0], [2.0, 2.0, 0.0], [1.0, 2.0, 5.0]],
                [[2.0, 2.0, 0.0], [1.0, 2.0, 5.0], [2.0, 2.0, 5.0]],
                [[1.0, 2.0, 0.0], [1.0, 2.0, 5.0], [1.0, 1.0, 5.0]],
                [[1.0, 1.0, 0.0], [1.0, 1.0, 5.0], [1.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [1.0, 2.0, 0.0], [2.0, 2.0, 0.0]],
                [[1.0, 1.0, 0.0], [2.0, 1.0, 0.0], [2.0, 2.0, 0.0]],
                [[2.0, 2.0, 6.0], [3.0, 1.0, 6.0], [2.0, 1.0, 6.0]],
                [[3.0, 1.0, 6.0], [2.0, 2.0, 6.0], [3.0, 2.0, 6.0]],
                [[3.0, 1.0, 0.0], [3.0, 1.0, 6.0], [3.0, 2.0, 0.0]],
                [[3.0, 2.0, 6.0], [3.0, 1.0, 6.0], [3.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [3.0, 1.0, 6.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 6.0], [3.0, 1.0, 6.0]],
                [[2.0, 2.0, 0.0], [3.0, 2.0, 0.0], [2.0, 2.0, 6.0]],
                [[3.0, 2.0, 0.0], [2.0, 2.0, 6.0], [3.0, 2.0, 6.0]],
                [[2.0, 2.0, 0.0], [2.0, 2.0, 6.0], [2.0, 1.0, 6.0]],
                [[2.0, 1.0, 0.0], [2.0, 1.0, 6.0], [2.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [2.0, 2.0, 0.0], [3.0, 2.0, 0.0]],
                [[2.0, 1.0, 0.0], [3.0, 1.0, 0.0], [3.0, 2.0, 0.0]],
                [[-2.5, 4.5, -5.0], [5.5, -2.5, -5.0], [-2.5, -2.5, -5.0]],
                [[5.5, -2.5, -5.0], [-2.5, 4.5, -5.0], [5.5, 4.5, -5.0]],
                [[5.5, -2.5, 0.0], [5.5, -2.5, -5.0], [5.5, 4.5, 0.0]],
                [[5.5, 4.5, -5.0], [5.5, -2.5, -5.0], [5.5, 4.5, 0.0]],
                [[-2.5, -2.5, 0.0], [5.5, -2.5, 0.0], [5.5, -2.5, -5.0]],
                [[-2.5, -2.5, 0.0], [-2.5, -2.5, -5.0], [5.5, -2.5, -5.0]],
                [[-2.5, 4.5, 0.0], [5.5, 4.5, 0.0], [-2.5, 4.5, -5.0]],
                [[5.5, 4.5, 0.0], [-2.5, 4.5, -5.0], [5.5, 4.5, -5.0]],
                [[-2.5, 4.5, 0.0], [-2.5, 4.5, -5.0], [-2.5, -2.5, -5.0]],
                [[-2.5, -2.5, 0.0], [-2.5, -2.5, -5.0], [-2.5, 4.5, 0.0]],
                [[-2.5, -2.5, 0.0], [-2.5, 4.5, 0.0], [5.5, 4.5, 0.0]],
                [[-2.5, -2.5, 0.0], [5.5, -2.5, 0.0], [5.5, 4.5, 0.0]],
            ]
        )
        numpy.testing.assert_array_equal(expected_output, test_output)

    def test_performance_create_vertices_from_2d_array(self):
        input_array = numpy.identity(120)
        iterations = 10
        start = time.time()
        for _ in range(0, iterations):
            sut.create_stl_mesh_from_2d_array(input_array)["vectors"]
        end = time.time()
        duration = (end - start) / iterations
        self.assertLess(duration, 1.0)
